void insert_sort(vector<int> &in) {
	for (int i = 1; i<in.size(); i++) {
		int key = in[i];
		int j = i - 1;
		while (j >= 0 && in[j]>key) {
			in[j + 1] = in[j];
			j--;
		}
		in[j + 1] = key;
	}
}

//IOA p171
int partition(vector<int> &A, int p, int r) {
	int x = A[r];
	int i = p - 1;
	for (int j = p; j<r; j++) {
		if (A[j]<A[r]) {
			i++;
			swap(A[i], A[j]);
		}
	}
	swap(A[i + 1], A[r]);
	return i + 1;
}


void quick_sort(vector<int> &A, int p, int r) {
	if (p<r) {
		int q = partition(A, p, r);
		quick_sort(A, p, q - 1);
		quick_sort(A, q + 1, r);
	}
}

//IOA p179
int randomized_partition(vector<int> &A, int p, int r) {
	srand(time(NULL));
	int random = p + rand() % (r - p);
	swap(A[random], A[r]);
	return partition(A, p, r);
}

void randomized_quick_sort(vector<int> &A, int p, int r) {
	if (p<r) {
		int q = randomized_partition(A, p, r);
		randomized_quick_sort(A, p, q - 1);
		randomized_quick_sort(A, q + 1, r);
	}
}
